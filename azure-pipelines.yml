# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# pr: none

trigger:
  branches:
    include:
      - master
      - release*
      - develop

pr:
  branches:
    include:
      - '*'

stages:
  - stage: CI

    jobs:
      ##########################
      - job: Build

        steps:
          - checkout: self
            submodules: recursive

          - task: NodeTool@0
            inputs:
              versionSpec: '10.x'
            displayName: 'Install Node.js'

          - bash: |
              current_tag=$(python -c "import sys, json; print(json.dumps((json.load(open(\"$(Build.SourcesDirectory)/package.json\"))[\"version\"])))")
              echo "##vso[task.setvariable variable=tag]$(echo $current_tag | sed -e 's/^\"//' -e 's/\"$//')"
              app_name=$(python -c "import sys, json; print(json.dumps((json.load(open(\"$(Build.SourcesDirectory)/package.json\"))[\"name\"])))")
              echo "##vso[task.setvariable variable=package-name]$(echo $app_name | sed -e 's/^\"//' -e 's/\"$//')"
            displayName: 'setting version'
          - script: |
              npm install
              npm run build
            displayName: 'npm install and build'
          - task: ArchiveFiles@2
            inputs:
              #rootFolderOrFile: '$(Build.BinariesDirectory)'
              rootFolderOrFile: '$(Build.SourcesDirectory)/dist/bundle.pos'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(package-name)_v$(tag).ppk'
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(package-name)_v$(tag).ppk'
              artifactName: 'PPK'

  - stage: CD
    dependsOn: CI
    condition: "and(and(succeeded(), ne(variables['Build.Reason'],'PullRequest')), and(succeeded(), eq(variables['Build.SourceBranch'],'refs/heads/master')))"

    jobs:
      ##########################
      - job: Publish

        steps:
          - bash: |
              current_tag=$(python -c "import sys, json; print(json.dumps((json.load(open(\"$(Build.SourcesDirectory)/package.json\"))[\"version\"])))")
              echo "##vso[task.setvariable variable=tag]$(echo $current_tag | sed -e 's/^\"//' -e 's/\"$//')"
              app_name=$(python -c "import sys, json; print(json.dumps((json.load(open(\"$(Build.SourcesDirectory)/package.json\"))[\"name\"])))")
              echo "##vso[task.setvariable variable=package-name]$(echo $app_name | sed -e 's/^\"//' -e 's/\"$//')"
            displayName: 'setting version'
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              buildVersionToDownload: 'latest'
              downloadType: 'single'
              artifactName: 'PPK'
              path: '$(Build.ArtifactStagingDirectory)'

          - task: GitHubRelease@0
            inputs:
              gitHubConnection: 'Stone Co. Github'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'manual'
              tag: '$(tag)'
              changeLogCompareToRelease: 'lastFullRelease'
              changeLogType: 'issueBased'
              #tagPattern: # Optional
              title: '$(package-name) v$(tag)' # Optional
              #releaseNotesSource: 'file' # Optional. Options: file, input
              #releaseNotesFile: # Optional
              #releaseNotes: # Optional
              assets: '$(Build.ArtifactStagingDirectory)/$(package-name)_v$(tag).ppk' # Optional
              #assetUploadMode: 'delete' # Optional. Options: delete, replace
              #isDraft: false # Optional
              #isPreRelease: false # Optional
              #addChangeLog: true # Optional
              #compareWith: 'lastFullRelease' # Required when addChangeLog == True. Options: lastFullRelease, lastRelease, lastReleaseByTag
              #releaseTag: # Required when compareWith == LastReleaseByTag
