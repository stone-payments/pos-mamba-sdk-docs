const { readdirSync, statSync } = require('fs');
const { join } = require('path');
const fetch = require('node-fetch');
const loaderUtils = require('loader-utils');
const globby = require('globby');

const directories = p =>
  readdirSync(p).filter(f => statSync(join(p, f)).isDirectory());

// The motivation of this loader is to keep components navigations up to date.
// We call our repository to read folders which are our packages
// We can use local folder packages which is generated by postinstall script
function loader(source) {
  this.cacheable && this.cacheable();
  this.value = source;

  const opts = Object.assign(
    { localPath: 'packages/components' },
    loaderUtils.getOptions(this) || {},
  );

  let packages = [];

  let exclude = [];

  packages = directories(opts.localPath).reduce((r, c) => {
    if (!exclude.includes(c)) {
      const componentRoute = {
        title: c.charAt(0).toUpperCase() + c.slice(1),
        to: `/${c.toLowerCase()}`,
      };

      r.push(componentRoute);
    }
    return r;
  }, []);

  return `module.exports = ${JSON.stringify(packages)};`;
}

module.exports = loader;
